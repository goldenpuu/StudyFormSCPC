import java.io.BufferdReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class RollingBallExam{

  public static void main(String args[]) throws IOException{
    StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int test; //수행횟수
        int radius, start_x = 0, end_x = 0, num_hurdle;
        int x1, x2, wr; // 장애물의 왼쪽 경계, 오른쪽 경계, 높이
        double answer;
        
        test = Integer.parseInt(br.readLine());
        
        for(int i = 1 ; i <= test; i++){
          StringTokenizer st = new StringTokenizer(br.readLine());
          radius = Integer.parseInt(st.nextToken());
          start_x = Integer.parseInt(st.nextToken());
          end_x = Integer.parseInt(st.nextToken());
          num_hurdle =Integer.parseInt(br.readLine());
          answer = 0;
          
          for(int j = 1; j <= num_hurdle ; j++){
              st = new StringTokenizer(br.readLine());
              x1 = Integer.parseInt(st.nextToken());
              x2 = Integer.parseInt(st.nextToken());
              wr = Integer.parseInt(st.nextToken());
              if(x1 > start_x && x2 < end_x){
                if(wr >= radius){
                  answer += Math.PI*radius;
                  answer += 2*(wr-radius); // 원의 세로이동 값 (반지름의 길이 만큼 덜 올라가고 덜 내려가는 부분을 뺄셈에 추가)
                  }else{      // 장애물의 높이가 원의 반지름 보다 낮을 경우
                  answer += 2*(2*Math.PI*radius* ((90L-Math.toDegrees(Math.asin((double)(radius-wr)/radius)))/360) );
                  }// 부채꼴의 호의 길이 공식 2*파이*r*각도
                }
              }
            
            answer += end_x - start_x - (num_hurdle*2*radius); // 원의 가로 이동 값 (호를 그려서 대체된 부분을 뺄셈에 추가)
            sb.append("Case #"+i+"\n"+answer+"\n");
        }
        
        
        System.out.println(sb.toString());
    	br.close();
  }
}
